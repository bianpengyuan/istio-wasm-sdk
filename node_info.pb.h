// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: node_info.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_node_5finfo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_node_5finfo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_node_5finfo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_node_5finfo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_node_5finfo_2eproto;
namespace wasm {
namespace common {
class NodeInfo;
class NodeInfoDefaultTypeInternal;
extern NodeInfoDefaultTypeInternal _NodeInfo_default_instance_;
class NodeInfo_LabelsEntry_DoNotUse;
class NodeInfo_LabelsEntry_DoNotUseDefaultTypeInternal;
extern NodeInfo_LabelsEntry_DoNotUseDefaultTypeInternal _NodeInfo_LabelsEntry_DoNotUse_default_instance_;
class NodeInfo_PlatformMetadataEntry_DoNotUse;
class NodeInfo_PlatformMetadataEntry_DoNotUseDefaultTypeInternal;
extern NodeInfo_PlatformMetadataEntry_DoNotUseDefaultTypeInternal _NodeInfo_PlatformMetadataEntry_DoNotUse_default_instance_;
}  // namespace common
}  // namespace wasm
PROTOBUF_NAMESPACE_OPEN
template<> ::wasm::common::NodeInfo* Arena::CreateMaybeMessage<::wasm::common::NodeInfo>(Arena*);
template<> ::wasm::common::NodeInfo_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::wasm::common::NodeInfo_LabelsEntry_DoNotUse>(Arena*);
template<> ::wasm::common::NodeInfo_PlatformMetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::wasm::common::NodeInfo_PlatformMetadataEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace wasm {
namespace common {

// ===================================================================

class NodeInfo_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeInfo_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NodeInfo_LabelsEntry_DoNotUse();
  NodeInfo_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NodeInfo_LabelsEntry_DoNotUse& other);
  static const NodeInfo_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeInfo_LabelsEntry_DoNotUse*>(&_NodeInfo_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "wasm.common.NodeInfo.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "wasm.common.NodeInfo.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5finfo_2eproto);
    return ::descriptor_table_node_5finfo_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class NodeInfo_PlatformMetadataEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeInfo_PlatformMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<NodeInfo_PlatformMetadataEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NodeInfo_PlatformMetadataEntry_DoNotUse();
  NodeInfo_PlatformMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const NodeInfo_PlatformMetadataEntry_DoNotUse& other);
  static const NodeInfo_PlatformMetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeInfo_PlatformMetadataEntry_DoNotUse*>(&_NodeInfo_PlatformMetadataEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "wasm.common.NodeInfo.PlatformMetadataEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "wasm.common.NodeInfo.PlatformMetadataEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5finfo_2eproto);
    return ::descriptor_table_node_5finfo_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class NodeInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:wasm.common.NodeInfo) */ {
 public:
  NodeInfo();
  virtual ~NodeInfo();

  NodeInfo(const NodeInfo& from);
  NodeInfo(NodeInfo&& from) noexcept
    : NodeInfo() {
    *this = ::std::move(from);
  }

  inline NodeInfo& operator=(const NodeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline NodeInfo& operator=(NodeInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NodeInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeInfo* internal_default_instance() {
    return reinterpret_cast<const NodeInfo*>(
               &_NodeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NodeInfo& a, NodeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(NodeInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NodeInfo* New() const final {
    return CreateMaybeMessage<NodeInfo>(nullptr);
  }

  NodeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NodeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NodeInfo& from);
  void MergeFrom(const NodeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "wasm.common.NodeInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_node_5finfo_2eproto);
    return ::descriptor_table_node_5finfo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kPlatformMetadataFieldNumber = 6,
    kNameFieldNumber = 1,
    kNamespaceFieldNumber = 2,
    kOwnerFieldNumber = 4,
    kWorkloadNameFieldNumber = 5,
    kIstioVersionFieldNumber = 7,
    kMeshIdFieldNumber = 8,
  };
  // map<string, string> labels = 3[json_name = "LABELS"];
  int labels_size() const;
  void clear_labels();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // map<string, string> platform_metadata = 6[json_name = "PLATFORM_METADATA"];
  int platform_metadata_size() const;
  void clear_platform_metadata();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      platform_metadata() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_platform_metadata();

  // string name = 1[json_name = "NAME"];
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // string namespace = 2[json_name = "NAMESPACE"];
  void clear_namespace_();
  const std::string& namespace_() const;
  void set_namespace_(const std::string& value);
  void set_namespace_(std::string&& value);
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  std::string* mutable_namespace_();
  std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);

  // string owner = 4[json_name = "OWNER"];
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);

  // string workload_name = 5[json_name = "WORKLOAD_NAME"];
  void clear_workload_name();
  const std::string& workload_name() const;
  void set_workload_name(const std::string& value);
  void set_workload_name(std::string&& value);
  void set_workload_name(const char* value);
  void set_workload_name(const char* value, size_t size);
  std::string* mutable_workload_name();
  std::string* release_workload_name();
  void set_allocated_workload_name(std::string* workload_name);

  // string istio_version = 7[json_name = "ISTIO_VERSION"];
  void clear_istio_version();
  const std::string& istio_version() const;
  void set_istio_version(const std::string& value);
  void set_istio_version(std::string&& value);
  void set_istio_version(const char* value);
  void set_istio_version(const char* value, size_t size);
  std::string* mutable_istio_version();
  std::string* release_istio_version();
  void set_allocated_istio_version(std::string* istio_version);

  // string mesh_id = 8[json_name = "MESH_ID"];
  void clear_mesh_id();
  const std::string& mesh_id() const;
  void set_mesh_id(const std::string& value);
  void set_mesh_id(std::string&& value);
  void set_mesh_id(const char* value);
  void set_mesh_id(const char* value, size_t size);
  std::string* mutable_mesh_id();
  std::string* release_mesh_id();
  void set_allocated_mesh_id(std::string* mesh_id);

  // @@protoc_insertion_point(class_scope:wasm.common.NodeInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NodeInfo_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      NodeInfo_PlatformMetadataEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > platform_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workload_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr istio_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_node_5finfo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeInfo

// string name = 1[json_name = "NAME"];
inline void NodeInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::name() const {
  // @@protoc_insertion_point(field_get:wasm.common.NodeInfo.name)
  return name_.GetNoArena();
}
inline void NodeInfo::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wasm.common.NodeInfo.name)
}
inline void NodeInfo::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wasm.common.NodeInfo.name)
}
inline void NodeInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wasm.common.NodeInfo.name)
}
inline void NodeInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wasm.common.NodeInfo.name)
}
inline std::string* NodeInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:wasm.common.NodeInfo.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_name() {
  // @@protoc_insertion_point(field_release:wasm.common.NodeInfo.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:wasm.common.NodeInfo.name)
}

// string namespace = 2[json_name = "NAMESPACE"];
inline void NodeInfo::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::namespace_() const {
  // @@protoc_insertion_point(field_get:wasm.common.NodeInfo.namespace)
  return namespace__.GetNoArena();
}
inline void NodeInfo::set_namespace_(const std::string& value) {
  
  namespace__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wasm.common.NodeInfo.namespace)
}
inline void NodeInfo::set_namespace_(std::string&& value) {
  
  namespace__.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wasm.common.NodeInfo.namespace)
}
inline void NodeInfo::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  namespace__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wasm.common.NodeInfo.namespace)
}
inline void NodeInfo::set_namespace_(const char* value, size_t size) {
  
  namespace__.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wasm.common.NodeInfo.namespace)
}
inline std::string* NodeInfo::mutable_namespace_() {
  
  // @@protoc_insertion_point(field_mutable:wasm.common.NodeInfo.namespace)
  return namespace__.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_namespace_() {
  // @@protoc_insertion_point(field_release:wasm.common.NodeInfo.namespace)
  
  return namespace__.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:wasm.common.NodeInfo.namespace)
}

// map<string, string> labels = 3[json_name = "LABELS"];
inline int NodeInfo::labels_size() const {
  return labels_.size();
}
inline void NodeInfo::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NodeInfo::labels() const {
  // @@protoc_insertion_point(field_map:wasm.common.NodeInfo.labels)
  return labels_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NodeInfo::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:wasm.common.NodeInfo.labels)
  return labels_.MutableMap();
}

// string owner = 4[json_name = "OWNER"];
inline void NodeInfo::clear_owner() {
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::owner() const {
  // @@protoc_insertion_point(field_get:wasm.common.NodeInfo.owner)
  return owner_.GetNoArena();
}
inline void NodeInfo::set_owner(const std::string& value) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wasm.common.NodeInfo.owner)
}
inline void NodeInfo::set_owner(std::string&& value) {
  
  owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wasm.common.NodeInfo.owner)
}
inline void NodeInfo::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wasm.common.NodeInfo.owner)
}
inline void NodeInfo::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wasm.common.NodeInfo.owner)
}
inline std::string* NodeInfo::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:wasm.common.NodeInfo.owner)
  return owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_owner() {
  // @@protoc_insertion_point(field_release:wasm.common.NodeInfo.owner)
  
  return owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:wasm.common.NodeInfo.owner)
}

// string workload_name = 5[json_name = "WORKLOAD_NAME"];
inline void NodeInfo::clear_workload_name() {
  workload_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::workload_name() const {
  // @@protoc_insertion_point(field_get:wasm.common.NodeInfo.workload_name)
  return workload_name_.GetNoArena();
}
inline void NodeInfo::set_workload_name(const std::string& value) {
  
  workload_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wasm.common.NodeInfo.workload_name)
}
inline void NodeInfo::set_workload_name(std::string&& value) {
  
  workload_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wasm.common.NodeInfo.workload_name)
}
inline void NodeInfo::set_workload_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workload_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wasm.common.NodeInfo.workload_name)
}
inline void NodeInfo::set_workload_name(const char* value, size_t size) {
  
  workload_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wasm.common.NodeInfo.workload_name)
}
inline std::string* NodeInfo::mutable_workload_name() {
  
  // @@protoc_insertion_point(field_mutable:wasm.common.NodeInfo.workload_name)
  return workload_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_workload_name() {
  // @@protoc_insertion_point(field_release:wasm.common.NodeInfo.workload_name)
  
  return workload_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_workload_name(std::string* workload_name) {
  if (workload_name != nullptr) {
    
  } else {
    
  }
  workload_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workload_name);
  // @@protoc_insertion_point(field_set_allocated:wasm.common.NodeInfo.workload_name)
}

// map<string, string> platform_metadata = 6[json_name = "PLATFORM_METADATA"];
inline int NodeInfo::platform_metadata_size() const {
  return platform_metadata_.size();
}
inline void NodeInfo::clear_platform_metadata() {
  platform_metadata_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
NodeInfo::platform_metadata() const {
  // @@protoc_insertion_point(field_map:wasm.common.NodeInfo.platform_metadata)
  return platform_metadata_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
NodeInfo::mutable_platform_metadata() {
  // @@protoc_insertion_point(field_mutable_map:wasm.common.NodeInfo.platform_metadata)
  return platform_metadata_.MutableMap();
}

// string istio_version = 7[json_name = "ISTIO_VERSION"];
inline void NodeInfo::clear_istio_version() {
  istio_version_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::istio_version() const {
  // @@protoc_insertion_point(field_get:wasm.common.NodeInfo.istio_version)
  return istio_version_.GetNoArena();
}
inline void NodeInfo::set_istio_version(const std::string& value) {
  
  istio_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wasm.common.NodeInfo.istio_version)
}
inline void NodeInfo::set_istio_version(std::string&& value) {
  
  istio_version_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wasm.common.NodeInfo.istio_version)
}
inline void NodeInfo::set_istio_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  istio_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wasm.common.NodeInfo.istio_version)
}
inline void NodeInfo::set_istio_version(const char* value, size_t size) {
  
  istio_version_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wasm.common.NodeInfo.istio_version)
}
inline std::string* NodeInfo::mutable_istio_version() {
  
  // @@protoc_insertion_point(field_mutable:wasm.common.NodeInfo.istio_version)
  return istio_version_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_istio_version() {
  // @@protoc_insertion_point(field_release:wasm.common.NodeInfo.istio_version)
  
  return istio_version_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_istio_version(std::string* istio_version) {
  if (istio_version != nullptr) {
    
  } else {
    
  }
  istio_version_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), istio_version);
  // @@protoc_insertion_point(field_set_allocated:wasm.common.NodeInfo.istio_version)
}

// string mesh_id = 8[json_name = "MESH_ID"];
inline void NodeInfo::clear_mesh_id() {
  mesh_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NodeInfo::mesh_id() const {
  // @@protoc_insertion_point(field_get:wasm.common.NodeInfo.mesh_id)
  return mesh_id_.GetNoArena();
}
inline void NodeInfo::set_mesh_id(const std::string& value) {
  
  mesh_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:wasm.common.NodeInfo.mesh_id)
}
inline void NodeInfo::set_mesh_id(std::string&& value) {
  
  mesh_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:wasm.common.NodeInfo.mesh_id)
}
inline void NodeInfo::set_mesh_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mesh_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:wasm.common.NodeInfo.mesh_id)
}
inline void NodeInfo::set_mesh_id(const char* value, size_t size) {
  
  mesh_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:wasm.common.NodeInfo.mesh_id)
}
inline std::string* NodeInfo::mutable_mesh_id() {
  
  // @@protoc_insertion_point(field_mutable:wasm.common.NodeInfo.mesh_id)
  return mesh_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NodeInfo::release_mesh_id() {
  // @@protoc_insertion_point(field_release:wasm.common.NodeInfo.mesh_id)
  
  return mesh_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NodeInfo::set_allocated_mesh_id(std::string* mesh_id) {
  if (mesh_id != nullptr) {
    
  } else {
    
  }
  mesh_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mesh_id);
  // @@protoc_insertion_point(field_set_allocated:wasm.common.NodeInfo.mesh_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace wasm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_node_5finfo_2eproto
