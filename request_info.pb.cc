// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: request_info.proto

#include "request_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
namespace wasm {
namespace common {
class RequestInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestInfo> _instance;
} _RequestInfo_default_instance_;
}  // namespace common
}  // namespace wasm
static void InitDefaultsscc_info_RequestInfo_request_5finfo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::wasm::common::_RequestInfo_default_instance_;
    new (ptr) ::wasm::common::RequestInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::wasm::common::RequestInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RequestInfo_request_5finfo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsscc_info_RequestInfo_request_5finfo_2eproto}, {
      &scc_info_Int64Value_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_BoolValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_request_5finfo_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_request_5finfo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_request_5finfo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_request_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, request_timestamp_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, response_timestamp_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, request_size_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, response_size_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, destination_port_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, source_address_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, destination_address_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, request_protocol_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, response_code_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, response_flag_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, destination_service_host_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, destination_service_name_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, request_operation_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, mtls_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, source_principal_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, destination_principal_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, rbac_permissive_policy_id_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, rbac_permissive_engine_result_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, duration_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, response_duration_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, requested_server_name_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, traffic_direction_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, referer_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, user_agent_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, request_id_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, b3_trace_id_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, b3_span_id_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, b3_trace_sampled_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, url_path_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, url_host_),
  PROTOBUF_FIELD_OFFSET(::wasm::common::RequestInfo, url_scheme_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::wasm::common::RequestInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::wasm::common::_RequestInfo_default_instance_),
};

const char descriptor_table_protodef_request_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022request_info.proto\022\013wasm.common\032\036googl"
  "e/protobuf/wrappers.proto\"\250\r\n\013RequestInf"
  "o\0226\n\021request_timestamp\030\001 \001(\0132\033.google.pr"
  "otobuf.Int64Value\0227\n\022response_timestamp\030"
  "\002 \001(\0132\033.google.protobuf.Int64Value\0221\n\014re"
  "quest_size\030\003 \001(\0132\033.google.protobuf.Int64"
  "Value\0222\n\rresponse_size\030\004 \001(\0132\033.google.pr"
  "otobuf.Int64Value\0225\n\020destination_port\030\005 "
  "\001(\0132\033.google.protobuf.Int64Value\0224\n\016sour"
  "ce_address\030\006 \001(\0132\034.google.protobuf.Strin"
  "gValue\0229\n\023destination_address\030\007 \001(\0132\034.go"
  "ogle.protobuf.StringValue\0226\n\020request_pro"
  "tocol\030\010 \001(\0132\034.google.protobuf.StringValu"
  "e\0222\n\rresponse_code\030\t \001(\0132\033.google.protob"
  "uf.Int64Value\0223\n\rresponse_flag\030\n \001(\0132\034.g"
  "oogle.protobuf.StringValue\022>\n\030destinatio"
  "n_service_host\030\013 \001(\0132\034.google.protobuf.S"
  "tringValue\022>\n\030destination_service_name\030\014"
  " \001(\0132\034.google.protobuf.StringValue\0227\n\021re"
  "quest_operation\030\r \001(\0132\034.google.protobuf."
  "StringValue\022(\n\004mtls\030\016 \001(\0132\032.google.proto"
  "buf.BoolValue\0226\n\020source_principal\030\017 \001(\0132"
  "\034.google.protobuf.StringValue\022;\n\025destina"
  "tion_principal\030\020 \001(\0132\034.google.protobuf.S"
  "tringValue\022\?\n\031rbac_permissive_policy_id\030"
  "\021 \001(\0132\034.google.protobuf.StringValue\022C\n\035r"
  "bac_permissive_engine_result\030\022 \001(\0132\034.goo"
  "gle.protobuf.StringValue\022-\n\010duration\030\023 \001"
  "(\0132\033.google.protobuf.Int64Value\0226\n\021respo"
  "nse_duration\030\024 \001(\0132\033.google.protobuf.Int"
  "64Value\022;\n\025requested_server_name\030\025 \001(\0132\034"
  ".google.protobuf.StringValue\0226\n\021traffic_"
  "direction\030\026 \001(\0132\033.google.protobuf.Int64V"
  "alue\022-\n\007referer\030\027 \001(\0132\034.google.protobuf."
  "StringValue\0220\n\nuser_agent\030\030 \001(\0132\034.google"
  ".protobuf.StringValue\0220\n\nrequest_id\030\031 \001("
  "\0132\034.google.protobuf.StringValue\0221\n\013b3_tr"
  "ace_id\030\032 \001(\0132\034.google.protobuf.StringVal"
  "ue\0220\n\nb3_span_id\030\033 \001(\0132\034.google.protobuf"
  ".StringValue\0224\n\020b3_trace_sampled\030\034 \001(\0132\032"
  ".google.protobuf.BoolValue\022.\n\010url_path\030\035"
  " \001(\0132\034.google.protobuf.StringValue\022.\n\010ur"
  "l_host\030\036 \001(\0132\034.google.protobuf.StringVal"
  "ue\0220\n\nurl_scheme\030\037 \001(\0132\034.google.protobuf"
  ".StringValueb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_request_5finfo_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_request_5finfo_2eproto_sccs[1] = {
  &scc_info_RequestInfo_request_5finfo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_request_5finfo_2eproto_once;
static bool descriptor_table_request_5finfo_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_request_5finfo_2eproto = {
  &descriptor_table_request_5finfo_2eproto_initialized, descriptor_table_protodef_request_5finfo_2eproto, "request_info.proto", 1780,
  &descriptor_table_request_5finfo_2eproto_once, descriptor_table_request_5finfo_2eproto_sccs, descriptor_table_request_5finfo_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_request_5finfo_2eproto::offsets,
  file_level_metadata_request_5finfo_2eproto, 1, file_level_enum_descriptors_request_5finfo_2eproto, file_level_service_descriptors_request_5finfo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_request_5finfo_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_request_5finfo_2eproto), true);
namespace wasm {
namespace common {

// ===================================================================

void RequestInfo::InitAsDefaultInstance() {
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->request_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->response_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->request_size_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->response_size_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->destination_port_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->source_address_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->destination_address_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->request_protocol_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->response_code_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->response_flag_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->destination_service_host_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->destination_service_name_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->request_operation_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->mtls_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->source_principal_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->destination_principal_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->rbac_permissive_policy_id_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->rbac_permissive_engine_result_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->response_duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->requested_server_name_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->traffic_direction_ = const_cast< PROTOBUF_NAMESPACE_ID::Int64Value*>(
      PROTOBUF_NAMESPACE_ID::Int64Value::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->referer_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->user_agent_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->request_id_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->b3_trace_id_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->b3_span_id_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->b3_trace_sampled_ = const_cast< PROTOBUF_NAMESPACE_ID::BoolValue*>(
      PROTOBUF_NAMESPACE_ID::BoolValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->url_path_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->url_host_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
  ::wasm::common::_RequestInfo_default_instance_._instance.get_mutable()->url_scheme_ = const_cast< PROTOBUF_NAMESPACE_ID::StringValue*>(
      PROTOBUF_NAMESPACE_ID::StringValue::internal_default_instance());
}
class RequestInfo::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Int64Value& request_timestamp(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& response_timestamp(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& request_size(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& response_size(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& destination_port(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& source_address(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& destination_address(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& request_protocol(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& response_code(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& response_flag(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& destination_service_host(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& destination_service_name(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& request_operation(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& mtls(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& source_principal(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& destination_principal(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& rbac_permissive_policy_id(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& rbac_permissive_engine_result(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& duration(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& response_duration(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& requested_server_name(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::Int64Value& traffic_direction(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& referer(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& user_agent(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& request_id(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& b3_trace_id(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& b3_span_id(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& b3_trace_sampled(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& url_path(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& url_host(const RequestInfo* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& url_scheme(const RequestInfo* msg);
};

const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::request_timestamp(const RequestInfo* msg) {
  return *msg->request_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::response_timestamp(const RequestInfo* msg) {
  return *msg->response_timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::request_size(const RequestInfo* msg) {
  return *msg->request_size_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::response_size(const RequestInfo* msg) {
  return *msg->response_size_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::destination_port(const RequestInfo* msg) {
  return *msg->destination_port_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::source_address(const RequestInfo* msg) {
  return *msg->source_address_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::destination_address(const RequestInfo* msg) {
  return *msg->destination_address_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::request_protocol(const RequestInfo* msg) {
  return *msg->request_protocol_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::response_code(const RequestInfo* msg) {
  return *msg->response_code_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::response_flag(const RequestInfo* msg) {
  return *msg->response_flag_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::destination_service_host(const RequestInfo* msg) {
  return *msg->destination_service_host_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::destination_service_name(const RequestInfo* msg) {
  return *msg->destination_service_name_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::request_operation(const RequestInfo* msg) {
  return *msg->request_operation_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
RequestInfo::_Internal::mtls(const RequestInfo* msg) {
  return *msg->mtls_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::source_principal(const RequestInfo* msg) {
  return *msg->source_principal_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::destination_principal(const RequestInfo* msg) {
  return *msg->destination_principal_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::rbac_permissive_policy_id(const RequestInfo* msg) {
  return *msg->rbac_permissive_policy_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::rbac_permissive_engine_result(const RequestInfo* msg) {
  return *msg->rbac_permissive_engine_result_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::duration(const RequestInfo* msg) {
  return *msg->duration_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::response_duration(const RequestInfo* msg) {
  return *msg->response_duration_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::requested_server_name(const RequestInfo* msg) {
  return *msg->requested_server_name_;
}
const PROTOBUF_NAMESPACE_ID::Int64Value&
RequestInfo::_Internal::traffic_direction(const RequestInfo* msg) {
  return *msg->traffic_direction_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::referer(const RequestInfo* msg) {
  return *msg->referer_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::user_agent(const RequestInfo* msg) {
  return *msg->user_agent_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::request_id(const RequestInfo* msg) {
  return *msg->request_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::b3_trace_id(const RequestInfo* msg) {
  return *msg->b3_trace_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::b3_span_id(const RequestInfo* msg) {
  return *msg->b3_span_id_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
RequestInfo::_Internal::b3_trace_sampled(const RequestInfo* msg) {
  return *msg->b3_trace_sampled_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::url_path(const RequestInfo* msg) {
  return *msg->url_path_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::url_host(const RequestInfo* msg) {
  return *msg->url_host_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
RequestInfo::_Internal::url_scheme(const RequestInfo* msg) {
  return *msg->url_scheme_;
}
void RequestInfo::clear_request_timestamp() {
  if (GetArenaNoVirtual() == nullptr && request_timestamp_ != nullptr) {
    delete request_timestamp_;
  }
  request_timestamp_ = nullptr;
}
void RequestInfo::clear_response_timestamp() {
  if (GetArenaNoVirtual() == nullptr && response_timestamp_ != nullptr) {
    delete response_timestamp_;
  }
  response_timestamp_ = nullptr;
}
void RequestInfo::clear_request_size() {
  if (GetArenaNoVirtual() == nullptr && request_size_ != nullptr) {
    delete request_size_;
  }
  request_size_ = nullptr;
}
void RequestInfo::clear_response_size() {
  if (GetArenaNoVirtual() == nullptr && response_size_ != nullptr) {
    delete response_size_;
  }
  response_size_ = nullptr;
}
void RequestInfo::clear_destination_port() {
  if (GetArenaNoVirtual() == nullptr && destination_port_ != nullptr) {
    delete destination_port_;
  }
  destination_port_ = nullptr;
}
void RequestInfo::clear_source_address() {
  if (GetArenaNoVirtual() == nullptr && source_address_ != nullptr) {
    delete source_address_;
  }
  source_address_ = nullptr;
}
void RequestInfo::clear_destination_address() {
  if (GetArenaNoVirtual() == nullptr && destination_address_ != nullptr) {
    delete destination_address_;
  }
  destination_address_ = nullptr;
}
void RequestInfo::clear_request_protocol() {
  if (GetArenaNoVirtual() == nullptr && request_protocol_ != nullptr) {
    delete request_protocol_;
  }
  request_protocol_ = nullptr;
}
void RequestInfo::clear_response_code() {
  if (GetArenaNoVirtual() == nullptr && response_code_ != nullptr) {
    delete response_code_;
  }
  response_code_ = nullptr;
}
void RequestInfo::clear_response_flag() {
  if (GetArenaNoVirtual() == nullptr && response_flag_ != nullptr) {
    delete response_flag_;
  }
  response_flag_ = nullptr;
}
void RequestInfo::clear_destination_service_host() {
  if (GetArenaNoVirtual() == nullptr && destination_service_host_ != nullptr) {
    delete destination_service_host_;
  }
  destination_service_host_ = nullptr;
}
void RequestInfo::clear_destination_service_name() {
  if (GetArenaNoVirtual() == nullptr && destination_service_name_ != nullptr) {
    delete destination_service_name_;
  }
  destination_service_name_ = nullptr;
}
void RequestInfo::clear_request_operation() {
  if (GetArenaNoVirtual() == nullptr && request_operation_ != nullptr) {
    delete request_operation_;
  }
  request_operation_ = nullptr;
}
void RequestInfo::clear_mtls() {
  if (GetArenaNoVirtual() == nullptr && mtls_ != nullptr) {
    delete mtls_;
  }
  mtls_ = nullptr;
}
void RequestInfo::clear_source_principal() {
  if (GetArenaNoVirtual() == nullptr && source_principal_ != nullptr) {
    delete source_principal_;
  }
  source_principal_ = nullptr;
}
void RequestInfo::clear_destination_principal() {
  if (GetArenaNoVirtual() == nullptr && destination_principal_ != nullptr) {
    delete destination_principal_;
  }
  destination_principal_ = nullptr;
}
void RequestInfo::clear_rbac_permissive_policy_id() {
  if (GetArenaNoVirtual() == nullptr && rbac_permissive_policy_id_ != nullptr) {
    delete rbac_permissive_policy_id_;
  }
  rbac_permissive_policy_id_ = nullptr;
}
void RequestInfo::clear_rbac_permissive_engine_result() {
  if (GetArenaNoVirtual() == nullptr && rbac_permissive_engine_result_ != nullptr) {
    delete rbac_permissive_engine_result_;
  }
  rbac_permissive_engine_result_ = nullptr;
}
void RequestInfo::clear_duration() {
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void RequestInfo::clear_response_duration() {
  if (GetArenaNoVirtual() == nullptr && response_duration_ != nullptr) {
    delete response_duration_;
  }
  response_duration_ = nullptr;
}
void RequestInfo::clear_requested_server_name() {
  if (GetArenaNoVirtual() == nullptr && requested_server_name_ != nullptr) {
    delete requested_server_name_;
  }
  requested_server_name_ = nullptr;
}
void RequestInfo::clear_traffic_direction() {
  if (GetArenaNoVirtual() == nullptr && traffic_direction_ != nullptr) {
    delete traffic_direction_;
  }
  traffic_direction_ = nullptr;
}
void RequestInfo::clear_referer() {
  if (GetArenaNoVirtual() == nullptr && referer_ != nullptr) {
    delete referer_;
  }
  referer_ = nullptr;
}
void RequestInfo::clear_user_agent() {
  if (GetArenaNoVirtual() == nullptr && user_agent_ != nullptr) {
    delete user_agent_;
  }
  user_agent_ = nullptr;
}
void RequestInfo::clear_request_id() {
  if (GetArenaNoVirtual() == nullptr && request_id_ != nullptr) {
    delete request_id_;
  }
  request_id_ = nullptr;
}
void RequestInfo::clear_b3_trace_id() {
  if (GetArenaNoVirtual() == nullptr && b3_trace_id_ != nullptr) {
    delete b3_trace_id_;
  }
  b3_trace_id_ = nullptr;
}
void RequestInfo::clear_b3_span_id() {
  if (GetArenaNoVirtual() == nullptr && b3_span_id_ != nullptr) {
    delete b3_span_id_;
  }
  b3_span_id_ = nullptr;
}
void RequestInfo::clear_b3_trace_sampled() {
  if (GetArenaNoVirtual() == nullptr && b3_trace_sampled_ != nullptr) {
    delete b3_trace_sampled_;
  }
  b3_trace_sampled_ = nullptr;
}
void RequestInfo::clear_url_path() {
  if (GetArenaNoVirtual() == nullptr && url_path_ != nullptr) {
    delete url_path_;
  }
  url_path_ = nullptr;
}
void RequestInfo::clear_url_host() {
  if (GetArenaNoVirtual() == nullptr && url_host_ != nullptr) {
    delete url_host_;
  }
  url_host_ = nullptr;
}
void RequestInfo::clear_url_scheme() {
  if (GetArenaNoVirtual() == nullptr && url_scheme_ != nullptr) {
    delete url_scheme_;
  }
  url_scheme_ = nullptr;
}
RequestInfo::RequestInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:wasm.common.RequestInfo)
}
RequestInfo::RequestInfo(const RequestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_request_timestamp()) {
    request_timestamp_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.request_timestamp_);
  } else {
    request_timestamp_ = nullptr;
  }
  if (from.has_response_timestamp()) {
    response_timestamp_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.response_timestamp_);
  } else {
    response_timestamp_ = nullptr;
  }
  if (from.has_request_size()) {
    request_size_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.request_size_);
  } else {
    request_size_ = nullptr;
  }
  if (from.has_response_size()) {
    response_size_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.response_size_);
  } else {
    response_size_ = nullptr;
  }
  if (from.has_destination_port()) {
    destination_port_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.destination_port_);
  } else {
    destination_port_ = nullptr;
  }
  if (from.has_source_address()) {
    source_address_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.source_address_);
  } else {
    source_address_ = nullptr;
  }
  if (from.has_destination_address()) {
    destination_address_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.destination_address_);
  } else {
    destination_address_ = nullptr;
  }
  if (from.has_request_protocol()) {
    request_protocol_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.request_protocol_);
  } else {
    request_protocol_ = nullptr;
  }
  if (from.has_response_code()) {
    response_code_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.response_code_);
  } else {
    response_code_ = nullptr;
  }
  if (from.has_response_flag()) {
    response_flag_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.response_flag_);
  } else {
    response_flag_ = nullptr;
  }
  if (from.has_destination_service_host()) {
    destination_service_host_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.destination_service_host_);
  } else {
    destination_service_host_ = nullptr;
  }
  if (from.has_destination_service_name()) {
    destination_service_name_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.destination_service_name_);
  } else {
    destination_service_name_ = nullptr;
  }
  if (from.has_request_operation()) {
    request_operation_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.request_operation_);
  } else {
    request_operation_ = nullptr;
  }
  if (from.has_mtls()) {
    mtls_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.mtls_);
  } else {
    mtls_ = nullptr;
  }
  if (from.has_source_principal()) {
    source_principal_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.source_principal_);
  } else {
    source_principal_ = nullptr;
  }
  if (from.has_destination_principal()) {
    destination_principal_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.destination_principal_);
  } else {
    destination_principal_ = nullptr;
  }
  if (from.has_rbac_permissive_policy_id()) {
    rbac_permissive_policy_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.rbac_permissive_policy_id_);
  } else {
    rbac_permissive_policy_id_ = nullptr;
  }
  if (from.has_rbac_permissive_engine_result()) {
    rbac_permissive_engine_result_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.rbac_permissive_engine_result_);
  } else {
    rbac_permissive_engine_result_ = nullptr;
  }
  if (from.has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from.has_response_duration()) {
    response_duration_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.response_duration_);
  } else {
    response_duration_ = nullptr;
  }
  if (from.has_requested_server_name()) {
    requested_server_name_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.requested_server_name_);
  } else {
    requested_server_name_ = nullptr;
  }
  if (from.has_traffic_direction()) {
    traffic_direction_ = new PROTOBUF_NAMESPACE_ID::Int64Value(*from.traffic_direction_);
  } else {
    traffic_direction_ = nullptr;
  }
  if (from.has_referer()) {
    referer_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.referer_);
  } else {
    referer_ = nullptr;
  }
  if (from.has_user_agent()) {
    user_agent_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.user_agent_);
  } else {
    user_agent_ = nullptr;
  }
  if (from.has_request_id()) {
    request_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.request_id_);
  } else {
    request_id_ = nullptr;
  }
  if (from.has_b3_trace_id()) {
    b3_trace_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.b3_trace_id_);
  } else {
    b3_trace_id_ = nullptr;
  }
  if (from.has_b3_span_id()) {
    b3_span_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.b3_span_id_);
  } else {
    b3_span_id_ = nullptr;
  }
  if (from.has_b3_trace_sampled()) {
    b3_trace_sampled_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.b3_trace_sampled_);
  } else {
    b3_trace_sampled_ = nullptr;
  }
  if (from.has_url_path()) {
    url_path_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.url_path_);
  } else {
    url_path_ = nullptr;
  }
  if (from.has_url_host()) {
    url_host_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.url_host_);
  } else {
    url_host_ = nullptr;
  }
  if (from.has_url_scheme()) {
    url_scheme_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.url_scheme_);
  } else {
    url_scheme_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:wasm.common.RequestInfo)
}

void RequestInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestInfo_request_5finfo_2eproto.base);
  ::memset(&request_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&url_scheme_) -
      reinterpret_cast<char*>(&request_timestamp_)) + sizeof(url_scheme_));
}

RequestInfo::~RequestInfo() {
  // @@protoc_insertion_point(destructor:wasm.common.RequestInfo)
  SharedDtor();
}

void RequestInfo::SharedDtor() {
  if (this != internal_default_instance()) delete request_timestamp_;
  if (this != internal_default_instance()) delete response_timestamp_;
  if (this != internal_default_instance()) delete request_size_;
  if (this != internal_default_instance()) delete response_size_;
  if (this != internal_default_instance()) delete destination_port_;
  if (this != internal_default_instance()) delete source_address_;
  if (this != internal_default_instance()) delete destination_address_;
  if (this != internal_default_instance()) delete request_protocol_;
  if (this != internal_default_instance()) delete response_code_;
  if (this != internal_default_instance()) delete response_flag_;
  if (this != internal_default_instance()) delete destination_service_host_;
  if (this != internal_default_instance()) delete destination_service_name_;
  if (this != internal_default_instance()) delete request_operation_;
  if (this != internal_default_instance()) delete mtls_;
  if (this != internal_default_instance()) delete source_principal_;
  if (this != internal_default_instance()) delete destination_principal_;
  if (this != internal_default_instance()) delete rbac_permissive_policy_id_;
  if (this != internal_default_instance()) delete rbac_permissive_engine_result_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete response_duration_;
  if (this != internal_default_instance()) delete requested_server_name_;
  if (this != internal_default_instance()) delete traffic_direction_;
  if (this != internal_default_instance()) delete referer_;
  if (this != internal_default_instance()) delete user_agent_;
  if (this != internal_default_instance()) delete request_id_;
  if (this != internal_default_instance()) delete b3_trace_id_;
  if (this != internal_default_instance()) delete b3_span_id_;
  if (this != internal_default_instance()) delete b3_trace_sampled_;
  if (this != internal_default_instance()) delete url_path_;
  if (this != internal_default_instance()) delete url_host_;
  if (this != internal_default_instance()) delete url_scheme_;
}

void RequestInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestInfo& RequestInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestInfo_request_5finfo_2eproto.base);
  return *internal_default_instance();
}


void RequestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:wasm.common.RequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && request_timestamp_ != nullptr) {
    delete request_timestamp_;
  }
  request_timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && response_timestamp_ != nullptr) {
    delete response_timestamp_;
  }
  response_timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && request_size_ != nullptr) {
    delete request_size_;
  }
  request_size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && response_size_ != nullptr) {
    delete response_size_;
  }
  response_size_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_port_ != nullptr) {
    delete destination_port_;
  }
  destination_port_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_address_ != nullptr) {
    delete source_address_;
  }
  source_address_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_address_ != nullptr) {
    delete destination_address_;
  }
  destination_address_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && request_protocol_ != nullptr) {
    delete request_protocol_;
  }
  request_protocol_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && response_code_ != nullptr) {
    delete response_code_;
  }
  response_code_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && response_flag_ != nullptr) {
    delete response_flag_;
  }
  response_flag_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_service_host_ != nullptr) {
    delete destination_service_host_;
  }
  destination_service_host_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_service_name_ != nullptr) {
    delete destination_service_name_;
  }
  destination_service_name_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && request_operation_ != nullptr) {
    delete request_operation_;
  }
  request_operation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && mtls_ != nullptr) {
    delete mtls_;
  }
  mtls_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_principal_ != nullptr) {
    delete source_principal_;
  }
  source_principal_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && destination_principal_ != nullptr) {
    delete destination_principal_;
  }
  destination_principal_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rbac_permissive_policy_id_ != nullptr) {
    delete rbac_permissive_policy_id_;
  }
  rbac_permissive_policy_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && rbac_permissive_engine_result_ != nullptr) {
    delete rbac_permissive_engine_result_;
  }
  rbac_permissive_engine_result_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && response_duration_ != nullptr) {
    delete response_duration_;
  }
  response_duration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && requested_server_name_ != nullptr) {
    delete requested_server_name_;
  }
  requested_server_name_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && traffic_direction_ != nullptr) {
    delete traffic_direction_;
  }
  traffic_direction_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && referer_ != nullptr) {
    delete referer_;
  }
  referer_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && user_agent_ != nullptr) {
    delete user_agent_;
  }
  user_agent_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && request_id_ != nullptr) {
    delete request_id_;
  }
  request_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && b3_trace_id_ != nullptr) {
    delete b3_trace_id_;
  }
  b3_trace_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && b3_span_id_ != nullptr) {
    delete b3_span_id_;
  }
  b3_span_id_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && b3_trace_sampled_ != nullptr) {
    delete b3_trace_sampled_;
  }
  b3_trace_sampled_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && url_path_ != nullptr) {
    delete url_path_;
  }
  url_path_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && url_host_ != nullptr) {
    delete url_host_;
  }
  url_host_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && url_scheme_ != nullptr) {
    delete url_scheme_;
  }
  url_scheme_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RequestInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Int64Value request_timestamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_request_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value response_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(mutable_response_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value request_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_request_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value response_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_response_size(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value destination_port = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(mutable_destination_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue source_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(mutable_source_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue destination_address = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(mutable_destination_address(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue request_protocol = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(mutable_request_protocol(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value response_code = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(mutable_response_code(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue response_flag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(mutable_response_flag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue destination_service_host = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(mutable_destination_service_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue destination_service_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(mutable_destination_service_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue request_operation = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(mutable_request_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue mtls = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(mutable_mtls(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue source_principal = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(mutable_source_principal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue destination_principal = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(mutable_destination_principal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue rbac_permissive_policy_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(mutable_rbac_permissive_policy_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue rbac_permissive_engine_result = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(mutable_rbac_permissive_engine_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value duration = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value response_duration = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(mutable_response_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue requested_server_name = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(mutable_requested_server_name(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Int64Value traffic_direction = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(mutable_traffic_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue referer = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(mutable_referer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue user_agent = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(mutable_user_agent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue request_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(mutable_request_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue b3_trace_id = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(mutable_b3_trace_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue b3_span_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(mutable_b3_span_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue b3_trace_sampled = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(mutable_b3_trace_sampled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue url_path = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(mutable_url_path(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue url_host = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(mutable_url_host(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue url_scheme = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(mutable_url_scheme(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RequestInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:wasm.common.RequestInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Int64Value request_timestamp = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value response_timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value request_size = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value response_size = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value destination_port = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (42 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_port()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue source_address = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (50 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue destination_address = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue request_protocol = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (66 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request_protocol()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value response_code = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (74 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response_code()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue response_flag = 10;
      case 10: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (82 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response_flag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue destination_service_host = 11;
      case 11: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (90 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_service_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue destination_service_name = 12;
      case 12: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (98 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_service_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue request_operation = 13;
      case 13: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (106 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request_operation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue mtls = 14;
      case 14: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (114 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_mtls()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue source_principal = 15;
      case 15: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (122 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source_principal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue destination_principal = 16;
      case 16: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (130 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_destination_principal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue rbac_permissive_policy_id = 17;
      case 17: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (138 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rbac_permissive_policy_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue rbac_permissive_engine_result = 18;
      case 18: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (146 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_rbac_permissive_engine_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value duration = 19;
      case 19: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (154 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value response_duration = 20;
      case 20: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (162 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_response_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue requested_server_name = 21;
      case 21: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (170 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_requested_server_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Int64Value traffic_direction = 22;
      case 22: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (178 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_traffic_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue referer = 23;
      case 23: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (186 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_referer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue user_agent = 24;
      case 24: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (194 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_user_agent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue request_id = 25;
      case 25: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (202 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_request_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue b3_trace_id = 26;
      case 26: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (210 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_b3_trace_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue b3_span_id = 27;
      case 27: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (218 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_b3_span_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.BoolValue b3_trace_sampled = 28;
      case 28: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (226 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_b3_trace_sampled()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue url_path = 29;
      case 29: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (234 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_url_path()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue url_host = 30;
      case 30: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (242 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_url_host()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue url_scheme = 31;
      case 31: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (250 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_url_scheme()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:wasm.common.RequestInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:wasm.common.RequestInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RequestInfo::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:wasm.common.RequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value request_timestamp = 1;
  if (this->has_request_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, _Internal::request_timestamp(this), output);
  }

  // .google.protobuf.Int64Value response_timestamp = 2;
  if (this->has_response_timestamp()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, _Internal::response_timestamp(this), output);
  }

  // .google.protobuf.Int64Value request_size = 3;
  if (this->has_request_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::request_size(this), output);
  }

  // .google.protobuf.Int64Value response_size = 4;
  if (this->has_response_size()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::response_size(this), output);
  }

  // .google.protobuf.Int64Value destination_port = 5;
  if (this->has_destination_port()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, _Internal::destination_port(this), output);
  }

  // .google.protobuf.StringValue source_address = 6;
  if (this->has_source_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, _Internal::source_address(this), output);
  }

  // .google.protobuf.StringValue destination_address = 7;
  if (this->has_destination_address()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, _Internal::destination_address(this), output);
  }

  // .google.protobuf.StringValue request_protocol = 8;
  if (this->has_request_protocol()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, _Internal::request_protocol(this), output);
  }

  // .google.protobuf.Int64Value response_code = 9;
  if (this->has_response_code()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, _Internal::response_code(this), output);
  }

  // .google.protobuf.StringValue response_flag = 10;
  if (this->has_response_flag()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, _Internal::response_flag(this), output);
  }

  // .google.protobuf.StringValue destination_service_host = 11;
  if (this->has_destination_service_host()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, _Internal::destination_service_host(this), output);
  }

  // .google.protobuf.StringValue destination_service_name = 12;
  if (this->has_destination_service_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, _Internal::destination_service_name(this), output);
  }

  // .google.protobuf.StringValue request_operation = 13;
  if (this->has_request_operation()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, _Internal::request_operation(this), output);
  }

  // .google.protobuf.BoolValue mtls = 14;
  if (this->has_mtls()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, _Internal::mtls(this), output);
  }

  // .google.protobuf.StringValue source_principal = 15;
  if (this->has_source_principal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, _Internal::source_principal(this), output);
  }

  // .google.protobuf.StringValue destination_principal = 16;
  if (this->has_destination_principal()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, _Internal::destination_principal(this), output);
  }

  // .google.protobuf.StringValue rbac_permissive_policy_id = 17;
  if (this->has_rbac_permissive_policy_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, _Internal::rbac_permissive_policy_id(this), output);
  }

  // .google.protobuf.StringValue rbac_permissive_engine_result = 18;
  if (this->has_rbac_permissive_engine_result()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, _Internal::rbac_permissive_engine_result(this), output);
  }

  // .google.protobuf.Int64Value duration = 19;
  if (this->has_duration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, _Internal::duration(this), output);
  }

  // .google.protobuf.Int64Value response_duration = 20;
  if (this->has_response_duration()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, _Internal::response_duration(this), output);
  }

  // .google.protobuf.StringValue requested_server_name = 21;
  if (this->has_requested_server_name()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, _Internal::requested_server_name(this), output);
  }

  // .google.protobuf.Int64Value traffic_direction = 22;
  if (this->has_traffic_direction()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, _Internal::traffic_direction(this), output);
  }

  // .google.protobuf.StringValue referer = 23;
  if (this->has_referer()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, _Internal::referer(this), output);
  }

  // .google.protobuf.StringValue user_agent = 24;
  if (this->has_user_agent()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, _Internal::user_agent(this), output);
  }

  // .google.protobuf.StringValue request_id = 25;
  if (this->has_request_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, _Internal::request_id(this), output);
  }

  // .google.protobuf.StringValue b3_trace_id = 26;
  if (this->has_b3_trace_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, _Internal::b3_trace_id(this), output);
  }

  // .google.protobuf.StringValue b3_span_id = 27;
  if (this->has_b3_span_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, _Internal::b3_span_id(this), output);
  }

  // .google.protobuf.BoolValue b3_trace_sampled = 28;
  if (this->has_b3_trace_sampled()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, _Internal::b3_trace_sampled(this), output);
  }

  // .google.protobuf.StringValue url_path = 29;
  if (this->has_url_path()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, _Internal::url_path(this), output);
  }

  // .google.protobuf.StringValue url_host = 30;
  if (this->has_url_host()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, _Internal::url_host(this), output);
  }

  // .google.protobuf.StringValue url_scheme = 31;
  if (this->has_url_scheme()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, _Internal::url_scheme(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:wasm.common.RequestInfo)
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:wasm.common.RequestInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Int64Value request_timestamp = 1;
  if (this->has_request_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::request_timestamp(this), target);
  }

  // .google.protobuf.Int64Value response_timestamp = 2;
  if (this->has_response_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::response_timestamp(this), target);
  }

  // .google.protobuf.Int64Value request_size = 3;
  if (this->has_request_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::request_size(this), target);
  }

  // .google.protobuf.Int64Value response_size = 4;
  if (this->has_response_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::response_size(this), target);
  }

  // .google.protobuf.Int64Value destination_port = 5;
  if (this->has_destination_port()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::destination_port(this), target);
  }

  // .google.protobuf.StringValue source_address = 6;
  if (this->has_source_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::source_address(this), target);
  }

  // .google.protobuf.StringValue destination_address = 7;
  if (this->has_destination_address()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::destination_address(this), target);
  }

  // .google.protobuf.StringValue request_protocol = 8;
  if (this->has_request_protocol()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::request_protocol(this), target);
  }

  // .google.protobuf.Int64Value response_code = 9;
  if (this->has_response_code()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::response_code(this), target);
  }

  // .google.protobuf.StringValue response_flag = 10;
  if (this->has_response_flag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::response_flag(this), target);
  }

  // .google.protobuf.StringValue destination_service_host = 11;
  if (this->has_destination_service_host()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::destination_service_host(this), target);
  }

  // .google.protobuf.StringValue destination_service_name = 12;
  if (this->has_destination_service_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::destination_service_name(this), target);
  }

  // .google.protobuf.StringValue request_operation = 13;
  if (this->has_request_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::request_operation(this), target);
  }

  // .google.protobuf.BoolValue mtls = 14;
  if (this->has_mtls()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::mtls(this), target);
  }

  // .google.protobuf.StringValue source_principal = 15;
  if (this->has_source_principal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::source_principal(this), target);
  }

  // .google.protobuf.StringValue destination_principal = 16;
  if (this->has_destination_principal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, _Internal::destination_principal(this), target);
  }

  // .google.protobuf.StringValue rbac_permissive_policy_id = 17;
  if (this->has_rbac_permissive_policy_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, _Internal::rbac_permissive_policy_id(this), target);
  }

  // .google.protobuf.StringValue rbac_permissive_engine_result = 18;
  if (this->has_rbac_permissive_engine_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, _Internal::rbac_permissive_engine_result(this), target);
  }

  // .google.protobuf.Int64Value duration = 19;
  if (this->has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, _Internal::duration(this), target);
  }

  // .google.protobuf.Int64Value response_duration = 20;
  if (this->has_response_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, _Internal::response_duration(this), target);
  }

  // .google.protobuf.StringValue requested_server_name = 21;
  if (this->has_requested_server_name()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, _Internal::requested_server_name(this), target);
  }

  // .google.protobuf.Int64Value traffic_direction = 22;
  if (this->has_traffic_direction()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, _Internal::traffic_direction(this), target);
  }

  // .google.protobuf.StringValue referer = 23;
  if (this->has_referer()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, _Internal::referer(this), target);
  }

  // .google.protobuf.StringValue user_agent = 24;
  if (this->has_user_agent()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::user_agent(this), target);
  }

  // .google.protobuf.StringValue request_id = 25;
  if (this->has_request_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::request_id(this), target);
  }

  // .google.protobuf.StringValue b3_trace_id = 26;
  if (this->has_b3_trace_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        26, _Internal::b3_trace_id(this), target);
  }

  // .google.protobuf.StringValue b3_span_id = 27;
  if (this->has_b3_span_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        27, _Internal::b3_span_id(this), target);
  }

  // .google.protobuf.BoolValue b3_trace_sampled = 28;
  if (this->has_b3_trace_sampled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        28, _Internal::b3_trace_sampled(this), target);
  }

  // .google.protobuf.StringValue url_path = 29;
  if (this->has_url_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        29, _Internal::url_path(this), target);
  }

  // .google.protobuf.StringValue url_host = 30;
  if (this->has_url_host()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        30, _Internal::url_host(this), target);
  }

  // .google.protobuf.StringValue url_scheme = 31;
  if (this->has_url_scheme()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        31, _Internal::url_scheme(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wasm.common.RequestInfo)
  return target;
}

size_t RequestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wasm.common.RequestInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Int64Value request_timestamp = 1;
  if (this->has_request_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_timestamp_);
  }

  // .google.protobuf.Int64Value response_timestamp = 2;
  if (this->has_response_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_timestamp_);
  }

  // .google.protobuf.Int64Value request_size = 3;
  if (this->has_request_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_size_);
  }

  // .google.protobuf.Int64Value response_size = 4;
  if (this->has_response_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_size_);
  }

  // .google.protobuf.Int64Value destination_port = 5;
  if (this->has_destination_port()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_port_);
  }

  // .google.protobuf.StringValue source_address = 6;
  if (this->has_source_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_address_);
  }

  // .google.protobuf.StringValue destination_address = 7;
  if (this->has_destination_address()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_address_);
  }

  // .google.protobuf.StringValue request_protocol = 8;
  if (this->has_request_protocol()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_protocol_);
  }

  // .google.protobuf.Int64Value response_code = 9;
  if (this->has_response_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_code_);
  }

  // .google.protobuf.StringValue response_flag = 10;
  if (this->has_response_flag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_flag_);
  }

  // .google.protobuf.StringValue destination_service_host = 11;
  if (this->has_destination_service_host()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_service_host_);
  }

  // .google.protobuf.StringValue destination_service_name = 12;
  if (this->has_destination_service_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_service_name_);
  }

  // .google.protobuf.StringValue request_operation = 13;
  if (this->has_request_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_operation_);
  }

  // .google.protobuf.BoolValue mtls = 14;
  if (this->has_mtls()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mtls_);
  }

  // .google.protobuf.StringValue source_principal = 15;
  if (this->has_source_principal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_principal_);
  }

  // .google.protobuf.StringValue destination_principal = 16;
  if (this->has_destination_principal()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *destination_principal_);
  }

  // .google.protobuf.StringValue rbac_permissive_policy_id = 17;
  if (this->has_rbac_permissive_policy_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rbac_permissive_policy_id_);
  }

  // .google.protobuf.StringValue rbac_permissive_engine_result = 18;
  if (this->has_rbac_permissive_engine_result()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rbac_permissive_engine_result_);
  }

  // .google.protobuf.Int64Value duration = 19;
  if (this->has_duration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .google.protobuf.Int64Value response_duration = 20;
  if (this->has_response_duration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *response_duration_);
  }

  // .google.protobuf.StringValue requested_server_name = 21;
  if (this->has_requested_server_name()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *requested_server_name_);
  }

  // .google.protobuf.Int64Value traffic_direction = 22;
  if (this->has_traffic_direction()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *traffic_direction_);
  }

  // .google.protobuf.StringValue referer = 23;
  if (this->has_referer()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *referer_);
  }

  // .google.protobuf.StringValue user_agent = 24;
  if (this->has_user_agent()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_agent_);
  }

  // .google.protobuf.StringValue request_id = 25;
  if (this->has_request_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *request_id_);
  }

  // .google.protobuf.StringValue b3_trace_id = 26;
  if (this->has_b3_trace_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b3_trace_id_);
  }

  // .google.protobuf.StringValue b3_span_id = 27;
  if (this->has_b3_span_id()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b3_span_id_);
  }

  // .google.protobuf.BoolValue b3_trace_sampled = 28;
  if (this->has_b3_trace_sampled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *b3_trace_sampled_);
  }

  // .google.protobuf.StringValue url_path = 29;
  if (this->has_url_path()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *url_path_);
  }

  // .google.protobuf.StringValue url_host = 30;
  if (this->has_url_host()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *url_host_);
  }

  // .google.protobuf.StringValue url_scheme = 31;
  if (this->has_url_scheme()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *url_scheme_);
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:wasm.common.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:wasm.common.RequestInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:wasm.common.RequestInfo)
    MergeFrom(*source);
  }
}

void RequestInfo::MergeFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:wasm.common.RequestInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_request_timestamp()) {
    mutable_request_timestamp()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.request_timestamp());
  }
  if (from.has_response_timestamp()) {
    mutable_response_timestamp()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.response_timestamp());
  }
  if (from.has_request_size()) {
    mutable_request_size()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.request_size());
  }
  if (from.has_response_size()) {
    mutable_response_size()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.response_size());
  }
  if (from.has_destination_port()) {
    mutable_destination_port()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.destination_port());
  }
  if (from.has_source_address()) {
    mutable_source_address()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.source_address());
  }
  if (from.has_destination_address()) {
    mutable_destination_address()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.destination_address());
  }
  if (from.has_request_protocol()) {
    mutable_request_protocol()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.request_protocol());
  }
  if (from.has_response_code()) {
    mutable_response_code()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.response_code());
  }
  if (from.has_response_flag()) {
    mutable_response_flag()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.response_flag());
  }
  if (from.has_destination_service_host()) {
    mutable_destination_service_host()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.destination_service_host());
  }
  if (from.has_destination_service_name()) {
    mutable_destination_service_name()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.destination_service_name());
  }
  if (from.has_request_operation()) {
    mutable_request_operation()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.request_operation());
  }
  if (from.has_mtls()) {
    mutable_mtls()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from.mtls());
  }
  if (from.has_source_principal()) {
    mutable_source_principal()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.source_principal());
  }
  if (from.has_destination_principal()) {
    mutable_destination_principal()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.destination_principal());
  }
  if (from.has_rbac_permissive_policy_id()) {
    mutable_rbac_permissive_policy_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.rbac_permissive_policy_id());
  }
  if (from.has_rbac_permissive_engine_result()) {
    mutable_rbac_permissive_engine_result()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.rbac_permissive_engine_result());
  }
  if (from.has_duration()) {
    mutable_duration()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.duration());
  }
  if (from.has_response_duration()) {
    mutable_response_duration()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.response_duration());
  }
  if (from.has_requested_server_name()) {
    mutable_requested_server_name()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.requested_server_name());
  }
  if (from.has_traffic_direction()) {
    mutable_traffic_direction()->PROTOBUF_NAMESPACE_ID::Int64Value::MergeFrom(from.traffic_direction());
  }
  if (from.has_referer()) {
    mutable_referer()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.referer());
  }
  if (from.has_user_agent()) {
    mutable_user_agent()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.user_agent());
  }
  if (from.has_request_id()) {
    mutable_request_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.request_id());
  }
  if (from.has_b3_trace_id()) {
    mutable_b3_trace_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.b3_trace_id());
  }
  if (from.has_b3_span_id()) {
    mutable_b3_span_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.b3_span_id());
  }
  if (from.has_b3_trace_sampled()) {
    mutable_b3_trace_sampled()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from.b3_trace_sampled());
  }
  if (from.has_url_path()) {
    mutable_url_path()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.url_path());
  }
  if (from.has_url_host()) {
    mutable_url_host()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.url_host());
  }
  if (from.has_url_scheme()) {
    mutable_url_scheme()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from.url_scheme());
  }
}

void RequestInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:wasm.common.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestInfo::CopyFrom(const RequestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wasm.common.RequestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestInfo::IsInitialized() const {
  return true;
}

void RequestInfo::InternalSwap(RequestInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(request_timestamp_, other->request_timestamp_);
  swap(response_timestamp_, other->response_timestamp_);
  swap(request_size_, other->request_size_);
  swap(response_size_, other->response_size_);
  swap(destination_port_, other->destination_port_);
  swap(source_address_, other->source_address_);
  swap(destination_address_, other->destination_address_);
  swap(request_protocol_, other->request_protocol_);
  swap(response_code_, other->response_code_);
  swap(response_flag_, other->response_flag_);
  swap(destination_service_host_, other->destination_service_host_);
  swap(destination_service_name_, other->destination_service_name_);
  swap(request_operation_, other->request_operation_);
  swap(mtls_, other->mtls_);
  swap(source_principal_, other->source_principal_);
  swap(destination_principal_, other->destination_principal_);
  swap(rbac_permissive_policy_id_, other->rbac_permissive_policy_id_);
  swap(rbac_permissive_engine_result_, other->rbac_permissive_engine_result_);
  swap(duration_, other->duration_);
  swap(response_duration_, other->response_duration_);
  swap(requested_server_name_, other->requested_server_name_);
  swap(traffic_direction_, other->traffic_direction_);
  swap(referer_, other->referer_);
  swap(user_agent_, other->user_agent_);
  swap(request_id_, other->request_id_);
  swap(b3_trace_id_, other->b3_trace_id_);
  swap(b3_span_id_, other->b3_span_id_);
  swap(b3_trace_sampled_, other->b3_trace_sampled_);
  swap(url_path_, other->url_path_);
  swap(url_host_, other->url_host_);
  swap(url_scheme_, other->url_scheme_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace wasm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::wasm::common::RequestInfo* Arena::CreateMaybeMessage< ::wasm::common::RequestInfo >(Arena* arena) {
  return Arena::CreateInternal< ::wasm::common::RequestInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
